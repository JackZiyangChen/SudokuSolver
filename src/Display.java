
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Display extends javax.swing.JFrame {

    /**
     * Creates new form Display
     */
    
    private Sudoku maze;
    private ArrayList<Square> emptySquares;
    private File defaultDirectory;
    
    
    public Display() {
        initComponents();
        maze = new Sudoku();
        generateTableFromMaze("sudokuMap/map2.txt");
        defaultDirectory = new File("sudokuMap/");
        emptySquares = maze.getEmptySquares();
        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tableMaze.setDefaultRenderer(Object.class, centerRenderer);
        

        
        updateRendererAndListener();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMaze = new javax.swing.JTable();
        btnSolve = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku Solver 101");
        setResizable(false);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 450));

        tableMaze.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableMaze.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        tableMaze.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableMaze.setToolTipText("");
        tableMaze.setAlignmentX(0.0F);
        tableMaze.setAlignmentY(0.0F);
        tableMaze.setCellSelectionEnabled(true);
        tableMaze.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tableMaze.setMaximumSize(new java.awt.Dimension(2147483647, 800));
        tableMaze.setMinimumSize(new java.awt.Dimension(450, 450));
        tableMaze.setOpaque(false);
        tableMaze.setPreferredSize(tableMaze.getMinimumSize());
        tableMaze.setRowHeight(50);
        tableMaze.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tableMaze.setSelectionForeground(null);
        tableMaze.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableMaze.setTableHeader(null);
        tableMaze.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                OnKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableMaze);

        btnSolve.setText("Auto Solve");
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.setMaximumSize(new java.awt.Dimension(85, 23));
        btnReset.setMinimumSize(new java.awt.Dimension(85, 23));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnLoad.setLabel("Load Map");
        btnLoad.setMaximumSize(new java.awt.Dimension(85, 23));
        btnLoad.setMinimumSize(new java.awt.Dimension(85, 23));
        btnLoad.setPreferredSize(new java.awt.Dimension(85, 23));
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSolve, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed
        // TODO add your handling code here:
        solveMaze();
    }//GEN-LAST:event_btnSolveActionPerformed

    private void OnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OnKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_OnKeyPressed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        btnSolve.setEnabled(true);
        maze.reset();
        //System.out.println(maze.toString());
        generateTableFromMaze();
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        try{
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(defaultDirectory);
            fc.setMultiSelectionEnabled(false);
            int result = fc.showOpenDialog(null);
            if(result==JFileChooser.APPROVE_OPTION){
                maze.readFromMap(fc.getSelectedFile().getAbsolutePath());
                defaultDirectory = fc.getSelectedFile().getParentFile();
                emptySquares = maze.getEmptySquares();
                updateRendererAndListener();
                generateTableFromMaze();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    public void updateRendererAndListener(){
        RegularRenderer cr = new RegularRenderer(tableMaze.getDefaultRenderer(Object.class), Color.black, emptySquares);
        tableMaze.setDefaultRenderer(Object.class, cr);
        
        TableMazeListener modelListener = new TableMazeListener(tableMaze, maze,emptySquares);
        tableMaze.getModel().addTableModelListener(modelListener);
    }
    public void generateTableFromMaze(String fileName){
        String mapName = fileName;
        maze.readFromMap(mapName);
        generateTableFromMaze();
    }
    
    public void generateTableFromMaze(){
        tableMaze.changeSelection(0, 0, false, false);
        for(int r=0;r<maze.getGrid().length;r++){
            for(int c=0;c<maze.getGrid()[0].length;c++){
                if(maze.getGrid()[r][c].getVal()!=0){
                    tableMaze.setValueAt(maze.getGrid()[r][c].getVal(), r, c);
                }else{
                    tableMaze.setValueAt(null, r, c);
                }
            }
        }
        emptySquares = maze.getEmptySquares();
    }
    
    public void solveMaze(){
        if(!maze.solve()){
            JOptionPane.showMessageDialog(null, "There are no possible solutions to this sudoku");
        }else{
            generateTableFromMaze();
        }
        btnSolve.setEnabled(false);
    }
    
    
    
    static class RegularRenderer extends DefaultTableCellRenderer implements TableCellRenderer{
        TableCellRenderer render;
        Border b;
        ArrayList<Square> emptySquares;
        Color borderColor;
        public RegularRenderer(TableCellRenderer r, Color color, ArrayList<Square> emptySquares){
            render = r;
            borderColor=color;

            //It looks funky to have a different color on each side - but this is what you asked
            //You can comment out borders if you want too. (example try commenting out top and left borders)
            b = BorderFactory.createCompoundBorder();
            b = BorderFactory.createCompoundBorder(b, BorderFactory.createMatteBorder(1,1,1,1,color));
            
            this.emptySquares = emptySquares;

        }
        

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row,
                int column) {
            JComponent result = (JComponent)render.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            //System.out.println((((column/3)+1) + ((row/3)*3))/2);
            

            if((((column/3)+1) + ((row/3)*3))%2==0){
                result.setBackground(new Color(204,204,204));
            }else{
                result.setBackground(Color.WHITE);
            }
            result.setForeground(Color.black);
            if(isSelected){
                result.setBackground(new Color(153,153,153));
                System.out.println("selection: " + table.getValueAt(row, column));
            }
            for(Square s:emptySquares){
                if(s.getRow()==row && s.getColumn()==column){
                    result.setForeground(new Color(0, 128, 255));
                }
            }
            
            result.setBorder(b);
            result.setToolTipText("(r,c)".replace("r", row+"").replace("c", column+""));
            return result;
        }

    }
    
    static class InputRenderer extends RegularRenderer implements TableCellRenderer{
        private Sudoku maze;
        public InputRenderer(TableCellRenderer r, Color color, ArrayList<Square> emptySquares, Sudoku maze){
            super(r,color,emptySquares);
            this.maze = maze;
        }
        
        public InputRenderer(RegularRenderer renderer){
            super(renderer.render,renderer.borderColor,renderer.emptySquares);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JComponent result = (JComponent)render.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if( maze.isValidSquare(new Square(row,column,(Integer)(table.getValueAt(row, column)))) ){
                result.setForeground(new Color(0, 128, 255));
            }else{
                result.setForeground(Color.RED);
            }
            return result;
        }
        
        
    }

    static class TableMazeListener implements TableModelListener{
        private Sudoku maze;
        private JTable table;
        private ArrayList<Square> emptySquares;
        public TableMazeListener(JTable table, Sudoku maze,ArrayList<Square> emptySquares){
            this.maze = maze;
            this.emptySquares = emptySquares;
            this.table = table;
        }
        
        
        @Override
        public void tableChanged(TableModelEvent evt) 
        {
            // here goes your code "on cell update"
            if((table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()))==null){
                System.out.println("updated");
                return;
            }
            if((Integer)(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()))>9
                ||(Integer)(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()))==0){
                System.out.println(maze.getGrid()[table.getSelectedRow()][table.getSelectedColumn()].getVal()==0);
                if(maze.getGrid()[table.getSelectedRow()][table.getSelectedColumn()].getVal()==0){
                    table.setValueAt(null, table.getSelectedRow(), table.getSelectedColumn());
                }else{
                    table.setValueAt(maze.getGrid()[table.getSelectedRow()][table.getSelectedColumn()].getVal(), table.getSelectedRow(), table.getSelectedColumn());
                }
            }
            
            
            
            //System.out.println(maze.getSolvingSquares());
//            System.out.println(table.getSelectedRow());
            for(Square s:emptySquares){
                if(table.getSelectedRow()==s.getRow() && table.getSelectedColumn()==s.getColumn()){
                    return;
                }
            }
            if(maze.getGrid()[table.getSelectedRow()][table.getSelectedColumn()].getVal()!=(Integer)(table.getValueAt(table.getSelectedRow(), table.getSelectedColumn()))){
                table.setValueAt(maze.getGrid()[table.getSelectedRow()][table.getSelectedColumn()].getVal(), table.getSelectedRow(), table.getSelectedColumn());
            }
//            table.setDefaultRenderer(Object.class, new InputRenderer(table.getDefaultRenderer(Object.class),Color.black,maze.getSolvingSquares(),maze));
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSolve;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMaze;
    // End of variables declaration//GEN-END:variables
}
